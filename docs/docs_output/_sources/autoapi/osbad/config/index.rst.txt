osbad.config
============

.. py:module:: osbad.config








Module Contents
---------------

.. py:data:: SHOW_FIG_STATUS
   :value: True


   Global flag to control whether Matplotlib figures are displayed.

   When set to True, all figures generated by the pipeline and notebooks are
   shown interactively. When set to False, figures are saved to
   ``PIPELINE_OUTPUT_DIR`` but not displayed.

   .. note::

       Set ``SHOW_FIG_STATUS = False`` when running the pipeline in batch
       mode for multiple cells to avoid unnecessary rendering of figures.

.. py:data:: PIPELINE_OUTPUT_DIR

   Global directory path for storing pipeline artifacts.

   All figures, plots, and intermediate artifacts generated by the pipeline
   or Jupyter notebooks are written to this directory. If the directory does
   not already exist, it will be created at runtime.

   .. note::

       ``PIPELINE_OUTPUT_DIR`` defines the root location where all results
       (per-cell artifacts, exported plots, metrics, and hyperparameters)
       are stored. Ensure this path points to a valid writable location
       before running the pipeline.

.. py:function:: artifacts_output_dir(selected_cell_label: str) -> pathlib.PosixPath

   Ensure and return the artifacts directory for a given cell.

   Creates (if missing) a per-cell subdirectory under
   ``PIPELINE_OUTPUT_DIR`` and returns its path. All figures and
   artifacts for the selected cell should be written to this location.

   :param selected_cell_label: Identifier of the evaluated cell used
                               to name the subdirectory.
   :type selected_cell_label: str

   :returns: Path to the cell-specific artifacts directory.
   :rtype: pathlib.PosixPath


.. py:class:: CustomFormatter(fmt=None, datefmt=None, style='%', validate=True, *, defaults=None)

   Bases: :py:obj:`logging.Formatter`


   Custom logging formatter with colorized output.

   This formatter applies ANSI escape codes to add colors for different
   logging levels and customizes the format string for messages. INFO
   messages are displayed as plain text, while DEBUG, WARNING, ERROR, and
   CRITICAL messages include timestamps, file names, and line numbers for
   better context.

   Logging level styles:
       - INFO: Grey text, message only.
       - DEBUG: Red text with timestamp, name, file, and line number.
       - WARNING: Bold red text with extended debug-style format.
       - ERROR: Bold red text with extended debug-style format.
       - CRITICAL: Bold red text with extended debug-style format.


   .. py:attribute:: grey
      :value: '\x1b[38;21m'



   .. py:attribute:: yellow
      :value: '\x1b[33;21m'



   .. py:attribute:: red
      :value: '\x1b[31;21m'



   .. py:attribute:: bold_red
      :value: '\x1b[31;1m'



   .. py:attribute:: reset
      :value: '\x1b[0m'



   .. py:attribute:: debug_format
      :value: Multiline-String

      .. raw:: html

         <details><summary>Show Value</summary>

      .. code-block:: python

         """%(asctime)s - %(name)s - %(levelname)s
         %(message)s (%(filename)s:%(lineno)d)"""

      .. raw:: html

         </details>




   .. py:attribute:: info_format
      :value: '%(message)s'



   .. py:attribute:: FORMATS


   .. py:method:: format(record)

      Format the specified record as text.

      The record's attribute dictionary is used as the operand to a
      string formatting operation which yields the returned string.
      Before formatting the dictionary, a couple of preparatory steps
      are carried out. The message attribute of the record is computed
      using LogRecord.getMessage(). If the formatting string uses the
      time (as determined by a call to usesTime(), formatTime() is
      called to format the event time. If there is exception information,
      it is formatted using formatException() and appended to the message.



