osbad.viz
==========

.. py:module:: osbad.viz

.. autoapi-nested-parse::

   The methods outlined in this module visualize cycle data with and without
   anomalies.

   .. code-block::

       import osbad.viz as bviz





Module Contents
---------------

.. py:function:: plot_cycle_data(xseries: pandas.Series, yseries: pandas.Series, cycle_index_series: pandas.Series, xoutlier: pandas.Series = None, youtlier: pandas.Series = None) -> matplotlib.axes._axes.Axes

   Create scatter plot for the cycling data including colormap, colorbar and
   the option to plot outliers.

   :param xseries: Data for x-axis (e.g. capacity data);
   :type xseries: pd.Series
   :param yseries: Data for y-axis (e.g. voltage data);
   :type yseries: pd.Series
   :param cycle_index_series: Data for cycle count;
   :type cycle_index_series: pd.Series
   :param xoutlier: Anomalous x-data. Defaults to None.
   :type xoutlier: pd.Series, optional
   :param youtlier: Anomalous y-data. Defaults to None.
   :type youtlier: pd.Series, optional

   :returns: Matplotlib axes for additional external
             customization.
   :rtype: mpl.axes._axes.Axes

   Example::

       # Anomalous cycle has label = 1
       # Normal cycle has label = 0
       # true outliers from benchmarking dataset
       df_true_outlier = df_selected_cell_without_labels[
           df_selected_cell_without_labels.cycle_index.isin(
               true_outlier_cycle_index)]

       # Plot normal cycles with true outliers
       axplot = bviz.plot_cycle_data(
           xseries=df_selected_cell_without_labels["discharge_capacity"],
           yseries=df_selected_cell_without_labels["voltage"],
           cycle_index_series=df_selected_cell_without_labels["cycle_index"],
           xoutlier=df_true_outlier["discharge_capacity"],
           youtlier=df_true_outlier["voltage"])

       axplot.set_xlabel(
           r"Discharge capacity [Ah]",
           fontsize=14)
       axplot.set_ylabel(
           r"Discharge voltage [V]",
           fontsize=14)

       axplot.set_title(
           f"Cell {selected_cell_label}",
           fontsize=16)

       plt.show()


.. py:function:: hist_boxplot(df_var: pandas.Series) -> matplotlib.axes._axes.Axes

   Create boxplot and histogram of a given feature in the same chart.

   :param df_var: Feature to create the boxplot and histogram.
   :type df_var: pd.Series

   :returns: Matplotlib axes for additional external
             customization.
   :rtype: mpl.axes._axes.Axes

   Example::

       # Plot the histogram and boxplot of the scaled data
       ax_hist = bviz.hist_boxplot(
           df_var=df_capacity_med_scaled["scaled_discharge_capacity"])

       ax_hist.set_xlabel(
           r"Discharge capacity [Ah]",
           fontsize=12)
       ax_hist.set_ylabel(
           r"Count",
           fontsize=12)

       plt.show()


.. py:function:: scatterhist(xseries: pandas.Series, yseries: pandas.Series, cycle_index_series: pandas.Series, selected_cell_label=None) -> matplotlib.axes._axes.Axes

   Create scatterplot with histogram to display the distribution for
   x-axis and y-axis.

   :param xseries: Data for x-axis (e.g. capacity data);
   :type xseries: pd.Series
   :param yseries: Data for y-axis (e.g. voltage data);
   :type yseries: pd.Series
   :param cycle_index_series: Data for cycle count;
   :type cycle_index_series: pd.Series

   :returns: Matplotlib axes for additional external
             customization.
   :rtype: mpl.axes._axes.Axes

   Example::

       axplot = bviz.scatterhist(
           xseries=df_selected_cell_without_labels["discharge_capacity"],
           yseries=df_selected_cell_without_labels["voltage"],
           cycle_index_series=df_selected_cell_without_labels["cycle_index"])

       axplot.set_xlabel(
           r"Capacity [Ah]",
           fontsize=12)
       axplot.set_ylabel(
           r"Voltage [V]",
           fontsize=12)

       plt.show()


.. py:function:: plot_explain_scaling(df_scaled_capacity: pandas.DataFrame, df_scaled_voltage: pandas.DataFrame, extracted_cell_label: str, xoutlier: pandas.Series = None, youtlier: pandas.Series = None)

   Visual explanation of the scaling effects on the selected feature.

   :param df_scaled_capacity: Scaled capacity dataframe.
   :type df_scaled_capacity: pd.DataFrame
   :param df_scaled_voltage: Scaled voltage dataframe.
   :type df_scaled_voltage: pd.DataFrame
   :param extracted_cell_label: Cell-ID of the selected experiment.
   :type extracted_cell_label: str
   :param xoutlier: A series of anomalous xdata.
                    Defaults to None.
   :type xoutlier: pd.Series, optional
   :param youtlier: A series of anomalous ydata.
                    Defaults to None.
   :type youtlier: pd.Series, optional


.. py:function:: compare_hist_limits(df_variable, df_norm_variable, upper_limit, lower_limit)

.. py:function:: plot_quantiles(xdata: pandas.Series | numpy.ndarray, ax: matplotlib.axes._axes.Axes, fit=False, validate=False) -> matplotlib.axes._axes.Axes

   Adapt the probplot method from scipy stats to create the probability plot
   of a selected feature so that the feature distribution can be
   compared to the theoretical quantiles of a normal distribution.

   :param xdata: Selected feature.
   :type xdata: pd.Series | np.ndarray
   :param ax: Matplotlib axes from a subplot.
   :type ax: mpl.axes._axes.Axes
   :param fit: If True, create a straight line fit through the
               probability plot. Defaults to False.
   :type fit: bool, optional
   :param validate: If True, compare adapted visualization
                    method with scipy's implementation.
                    Defaults to False.
   :type validate: bool, optional

   :returns: Matplotlib axes for additional external
             customization.
   :rtype: mpl.axes._axes.Axes

   .. Note::

       The straight dotted line in the probability plot indicates a perfect
       fit to the normal distribution. If most data points fall approximately
       along the straight line, it implies that the feature are consistent
       with the normal distribution. Anomalies would appear as points far
       away from the main cluster and the straight line fit. If points
       deviate significantly in the tails, this suggests heavier tails
       compared to the theoretical normal distribution.

   Example::

       fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 6))

       ax1 = bp.plot_quantiles(
           xdata=np.array(df_max_dV["max_diff"]),
           ax=ax1,
           fit=True,
           validate=False)

       ax1.set_title("Normality check before removing outliers")

       ax2 = bp.plot_quantiles(
           xdata=np.array(df_max_dV_2nd_iter["max_diff"]),
           ax=ax2,
           fit=True,
           validate=False)

       ax2.set_title("Normality check after removing outliers")

       plt.show()


.. py:function:: plot_histogram_with_distribution_fit(df_variable: pandas.Series | numpy.ndarray, method='norm') -> matplotlib.axes._axes.Axes

   Plot the histogram of the selected feature with its distribution fit.

   :param df_variable: Selected feature.
   :type df_variable: pd.Series | np.ndarray
   :param method: Fit the feature data with either a normal
                  distribution "norm" or a lognormal
                  distribution "lognorm". Defaults to "norm".
   :type method: str, optional

   :returns: Matplotlib axes for additional external
             customization.
   :rtype: mpl.axes._axes.Axes


.. py:function:: plot_bubble_chart(xseries: pandas.Series, yseries: pandas.Series, bubble_size: numpy.ndarray | pandas.Series, unique_cycle_count: numpy.ndarray | pandas.Series = None, cycle_outlier_idx_label: numpy.ndarray = None) -> matplotlib.axes._axes.Axes

   Plot the bubble chart of each feature with scalable bubble size ratio
   depending on the anomaly score.

   :param xseries: Data to be plotted on the x-axis of the bubble
                   chart.
   :type xseries: pd.Series
   :param yseries: Data to be plotted on the y-axis of the bubble
                   chart.
   :type yseries: pd.Series
   :param bubble_size: Calculated bubble size depending
                       on the anomaly score.
   :type bubble_size: np.ndarray|pd.Series
   :param unique_cycle_count: Unique cycle
                              count of the
                              selected cell.
                              Defaults to None.
   :type unique_cycle_count: np.ndarray|pd.Series, optional
   :param cycle_outlier_idx_label: The index of anomalous
                                   cycles. Defaults
                                   to None.
   :type cycle_outlier_idx_label: np.ndarray, optional

   :returns: Matplotlib axes for additional external
             customization.
   :rtype: mpl.axes._axes.Axes

   .. code-block::

       # Plot the bubble chart and label the outliers
       axplot = bviz.plot_bubble_chart(
           xseries=df_features_per_cell["log_max_diff_dQ"],
           yseries=df_features_per_cell["log_max_diff_dV"],
           bubble_size=bubble_size,
           unique_cycle_count=unique_cycle_count,
           cycle_outlier_idx_label=true_outlier_cycle_index)

       axplot.set_title(
           f"Cell {selected_cell_label}", fontsize=13)

       axplot.set_xlabel(
           r"$\log(\Delta Q_\textrm{scaled,max,cyc)}\;\textrm{[Ah]}$",
           fontsize=12)
       axplot.set_ylabel(
           r"$\log(\Delta V_\textrm{scaled,max,cyc})\;\textrm{[V]}$",
           fontsize=12)

       output_fig_filename = (
           "log_bubble_plot_"
           + selected_cell_label
           + ".png")

       fig_output_path = (
           selected_cell_artifacts_dir.joinpath(output_fig_filename))

       plt.savefig(
           fig_output_path,
           dpi=200,
           bbox_inches="tight")

       plt.show()


.. py:function:: plot_scale_capacity(df_selected_cell_without_labels: pandas.DataFrame, selected_cell_label: str) -> pandas.DataFrame

   Implement median-IQR-scaling to the cell capacity dataset and plot
   the corresponding histogram-boxplot of the scaled feature.

   :param df_selected_cell_without_labels: Selected features
                                           without
                                           true labels.
   :type df_selected_cell_without_labels: pd.DataFrame

   :returns: Scaled cell capacity.
   :rtype: pd.DataFrame


.. py:function:: plot_scale_voltage(df_selected_cell_without_labels: pandas.DataFrame, selected_cell_label: str) -> pandas.DataFrame

   Implement median-IQR-scaling to the cell voltage dataset and plot
   the corresponding histogram-boxplot of the scaled feature.

   :param df_selected_cell_without_labels: Selected features
                                           without
                                           true labels.
   :type df_selected_cell_without_labels: pd.DataFrame

   :returns: Scaled cell voltage.
   :rtype: pd.DataFrame


