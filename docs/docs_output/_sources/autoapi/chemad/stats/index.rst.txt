osbad.stats
============

.. py:module:: osbad.stats

.. autoapi-nested-parse::

   The methods outlined in this module implement a suite of statistical methods
   to detect anomalies across multiple cycles in the given battery
   cycling protocols.


   .. code-block::

       import osbad.stats as bstats





Module Contents
---------------

.. py:function:: calculate_IQR_bound(df_variable: pandas.Series) -> tuple

   Calculate the IQR first and third quantile with the corresponding IQR
   lower and upper bounds.

   :param df_variable: Selected feature.
   :type df_variable: pd.Series

   :returns: IQR first and third quantile with the corresponding IQR
             lower and upper bounds.
   :rtype: tuple


.. py:function:: calculate_sd_outliers(df_variable: pandas.Series | numpy.ndarray) -> tuple

   Use the 3 standard deviation method to detect outliers.

   :param df_variable: Selected feature.
   :type df_variable: pd.Series | np.ndarray

   :returns: Potential anomalous cycle index detected by the standard
             deviation method with the calculated lower and upper limits.
   :rtype: tuple

   Example::

       (std_outlier_dQ_index,
       SD_min_limit_dQ,
       SD_max_limit_dQ) = sd.calculate_sd_outliers(df_max_dQ["max_diff"])


.. py:function:: calculate_bubble_size_ratio(df_variable: pandas.Series | numpy.ndarray) -> pandas.Series

   Calculate the bubble size of the feature in the bubble plot depending
   on the anomaly score by using the feature standardization method.

   :param df_variable: Selected feature.
   :type df_variable: pd.Series | np.ndarray

   :returns: Calculated bubble size of the feature.
   :rtype: pd.Series

   Example::

       df_bubble_size_dQ = sd.calculate_bubble_size_ratio(
           df_variable=df_max_dQ["max_diff_dQ"])

       df_bubble_size_dV = sd.calculate_bubble_size_ratio(
           df_variable=df_max_dV["max_diff"])


.. py:function:: calculate_feature_stats(df_variable: pandas.Series | numpy.ndarray, new_col_name: str = None) -> pandas.DataFrame

   Calculate the statistics (max, min, mean and standard deviation) of
   the selected feature.

   :param df_variable: Selected feature.
   :type df_variable: pd.Series | np.ndarray
   :param new_col_name: New column name for the calculated
                        feature statistics.
                        Defaults to None.
   :type new_col_name: str, optional

   :returns: Calculated statistics of the selected feature.
   :rtype: pd.DataFrame

   Example::

       max_dV_feature_stats = sd.calculate_feature_stats(
           np.array(df_max_dV["max_diff"]),
           new_col_name="dV")


.. py:function:: calculate_MAD_outliers(df_variable: pandas.Series | numpy.ndarray, MAD_factor: float = None)

   Use Median Absolute Deviation (MAD) method to detect outliers.

   :param df_variable: Selected feature.
   :type df_variable: pd.Series | np.ndarray
   :param MAD_factor: MAD-factor in the MAD equation.
   :type MAD_factor: float

   :returns: Potential anomalous cycle index detected by the MAD method
             with the calculated lower and upper limits.
   :rtype: tuple

   Note::

       One should note that the MAD-factor plays an important role to
       determine the corresponding MAD-score. If the underlying data
       distribution is Gaussian, then we can assume that
       MAD-factor = 1.4826.

       If one would like to relax the assumption about the normality
       of a feature distribution, then MAD-factor can be
       calculated from the reciprocal of the 75th-percentile of a
       standard distribution, which means a distribution with a
       mean of zero and a standard deviation of one).

   Example::

       # If MAD_factor is None, the MAD-factor will be calculated
       # from 1/Q3 of std-distribution
       (MAD_outlier_index_dV_norm_factor,
           MAD_min_limit_dV_norm_factor,
           MAD_max_limit_dV_norm_factor) = sd.calculate_MAD_outliers(
           df_max_dV["max_diff"],
           MAD_factor=1.4826)


.. py:function:: calculate_modified_zscore_outliers(df_variable: pandas.Series | numpy.ndarray, MAD_factor: float = None) -> tuple

   Use modified Z-score method to detect outliers.

   :param df_variable: Selected feature.
   :type df_variable: pd.Series | np.ndarray
   :param MAD_factor: MAD-factor in the MAD equation.
   :type MAD_factor: float

   :returns: Potential anomalous cycle index detected by the modified
             Zscore outlier detection method with the calculated lower
             and upper limits.
   :rtype: tuple

   Example::

       # If MAD_factor is None, the MAD-factor will be calculated
       # from 1/Q3 of std-distribution
       (MOD_Zoutlier_index_dV,
       MOD_Zmin_limit_dV,
       MOD_Zmax_limit_dV) = sd.calculate_modified_zscore_outliers(
           df_max_dV["max_diff"],
           MAD_factor=None)


.. py:function:: calculate_zscore_outliers(df_variable: pandas.Series | numpy.ndarray) -> tuple

   Use Z-score method to detect outliers.

   :param df_variable: Selected feature.
   :type df_variable: pd.Series | np.ndarray

   :returns: Potential anomalous cycle index detected by the Zscore
             method with the calculated lower and upper limits.
   :rtype: tuple

   Example::

       (zscore_outlier_index_dV,
           zscore_min_limit,
           zscore_max_limit) = sd.calculate_zscore_outliers(
           df_max_dV["max_diff"])



.. py:function:: calculate_zscore(df_variable: pandas.Series | numpy.ndarray) -> pandas.Series | numpy.ndarray

   Calculate the Z-score of the selected feature.

   :param df_variable: Selected feature.
   :type df_variable: pd.Series | np.ndarray

   :returns: Z-score of selected feature.
   :rtype: pd.Series|np.ndarray


.. py:function:: calculate_IQR_outliers(df_variable: pandas.Series | numpy.ndarray)

   Use the Interquartile Range (IQR) method to detect outliers.

   :param df_variable: Selected feature.
   :type df_variable: pd.Series | np.ndarray

   :returns: Potential anomalous cycle index detected by the IQR method
             with the calculated lower and upper limits.
   :rtype: tuple

   Example::

       (IQR_outlier_index_dV,
       IQR_min_limit_dV,
       IQR_max_limit_dV) = sd.calculate_IQR_outliers(
           df_variable=df_max_dV["max_diff"])


